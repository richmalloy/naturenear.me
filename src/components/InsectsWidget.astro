---
export interface Props {
  lat: number;
  lng: number;
  locationName: string;
}

const { lat, lng, locationName } = Astro.props;

let insectsData = null;
let error = null;

try {
  console.log(`ü¶ã Fetching insect data for ${locationName} (${lat}, ${lng})`);
  
  // iNaturalist API - get recent insect observations within 50km
  // Filter for class Insecta (insects) with photos and research grade
  const response = await fetch(
    `https://api.inaturalist.org/v1/observations?lat=${lat}&lng=${lng}&radius=50&taxon_id=47158&photos=true&quality_grade=research&per_page=20&order=desc&order_by=observed_on`
  );
  
  if (!response.ok) throw new Error(`iNaturalist API error: ${response.status}`);
  
  const data = await response.json();
  insectsData = data.results || [];
  console.log(`‚úÖ Insect data fetched for ${locationName}: ${insectsData.length} observations`);
} catch (e) {
  console.error(`‚ùå Insect fetch failed for ${locationName}:`, e);
  error = e.message;
  
  // Fallback to demo data if API fails
  console.log("üîÑ Using fallback insect demo data...");
  insectsData = [
    {
      taxon: {
        name: "Bombus pensylvanicus",
        preferred_common_name: "American Bumblebee",
        default_photo: { square_url: "https://static.inaturalist.org/photos/123/square.jpg" }
      },
      observed_on: new Date().toISOString().split('T')[0],
      place_guess: "Santa Fe National Forest"
    },
    {
      taxon: {
        name: "Vanessa cardui", 
        preferred_common_name: "Painted Lady",
        default_photo: { square_url: "https://static.inaturalist.org/photos/456/square.jpg" }
      },
      observed_on: new Date(Date.now() - 86400000).toISOString().split('T')[0],
      place_guess: "Bandelier National Monument"
    }
  ];
}

// Helper function to get insect emoji
function getInsectEmoji(commonName, scientificName) {
  const name = (commonName + " " + scientificName).toLowerCase();
  if (name.includes('butterfly') || name.includes('vanessa') || name.includes('monarch')) return 'ü¶ã';
  if (name.includes('bee') || name.includes('bombus') || name.includes('apis')) return 'üêù';
  if (name.includes('ant') || name.includes('formica')) return 'üêú';
  if (name.includes('beetle') || name.includes('coleoptera')) return 'ü™≤';
  if (name.includes('ladybug') || name.includes('coccinella')) return 'üêû';
  if (name.includes('dragonfly') || name.includes('libellula')) return 'ü™∞';
  if (name.includes('moth') || name.includes('lepidoptera')) return 'ü¶ã';
  if (name.includes('wasp') || name.includes('vespa')) return 'üêù';
  if (name.includes('cricket') || name.includes('grasshopper')) return 'ü¶ó';
  if (name.includes('spider') || name.includes('arachnid')) return 'üï∑Ô∏è';
  if (name.includes('mantis')) return 'ü¶Ç';
  return 'üêõ'; // Default bug emoji
}

// Helper function to format date
function formatObservationDate(dateStr) {
  const date = new Date(dateStr);
  const now = new Date();
  const diffDays = Math.floor((now - date) / (1000 * 60 * 60 * 24));
  
  if (diffDays === 0) return 'Today';
  if (diffDays === 1) return 'Yesterday';
  if (diffDays < 7) return `${diffDays} days ago`;
  if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;
  return date.toLocaleDateString();
}

// Group insects by type/family
const groupedInsects = insectsData ? insectsData.reduce((groups, insect) => {
  const name = (insect.taxon.preferred_common_name || insect.taxon.name || '').toLowerCase();
  let category;
  
  if (name.includes('butterfly') || name.includes('moth')) {
    category = 'butterflies';
  } else if (name.includes('bee') || name.includes('wasp')) {
    category = 'bees';
  } else if (name.includes('beetle')) {
    category = 'beetles';
  } else if (name.includes('ant')) {
    category = 'ants';
  } else {
    category = 'other';
  }
  
  if (!groups[category]) groups[category] = [];
  groups[category].push(insect);
  return groups;
}, {}) : null;

const categoryInfo = {
  butterflies: { emoji: 'ü¶ã', title: 'Butterflies & Moths', color: '#FF69B4' },
  bees: { emoji: 'üêù', title: 'Bees & Wasps', color: '#FFD700' },
  beetles: { emoji: 'ü™≤', title: 'Beetles', color: '#8B4513' },
  ants: { emoji: 'üêú', title: 'Ants', color: '#2F4F4F' },
  other: { emoji: 'üêõ', title: 'Other Insects', color: '#32CD32' }
};
---

<section id="insects" class="data-section insects-widget">
  <h2>ü¶ã Local Insects & Pollinators</h2>
  
  {error ? (
    <div class="insects-error">
      <p>‚ö†Ô∏è Unable to load insect data for {locationName}</p>
      <p class="error-details">{error}</p>
    </div>
  ) : !insectsData ? (
    <div class="insects-loading">
      <p>üîÑ Loading insect observations for {locationName}...</p>
    </div>
  ) : insectsData.length === 0 ? (
    <div class="no-insects">
      <p>üîç No recent insect observations found near {locationName}</p>
      <p>Check back later or try a different location!</p>
    </div>
  ) : (
    <div class="insects-content">
      <div class="insects-summary">
        <div class="stat-card">
          <span class="stat-number">{insectsData.length}</span>
          <span class="stat-label">Recent Observations</span>
        </div>
        <div class="stat-card">
          <span class="stat-number">{new Set(insectsData.map(i => i.taxon.name)).size}</span>
          <span class="stat-label">Species Identified</span>
        </div>
      </div>
      
      {Object.entries(groupedInsects).map(([category, insects]) => (
        <div class="insect-category">
          <h3 style={`color: ${categoryInfo[category]?.color}`}>
            {categoryInfo[category]?.emoji} {categoryInfo[category]?.title}
          </h3>
          <div class="insects-grid">
            {insects.slice(0, 6).map(insect => (
              <div class="insect-card">
                <div class="insect-header">
                  <span class="insect-emoji">{getInsectEmoji(insect.taxon.preferred_common_name, insect.taxon.name)}</span>
                  {insect.photos && insect.photos[0] && (
                    <img 
                      src={insect.photos[0].url.replace('square', 'small')} 
                      alt={insect.taxon.preferred_common_name || insect.taxon.name}
                      class="insect-photo"
                      loading="lazy"
                    />
                  )}
                </div>
                <div class="insect-info">
                  <h4 class="insect-name">
                    {insect.taxon.preferred_common_name || insect.taxon.name}
                  </h4>
                  {insect.taxon.preferred_common_name && (
                    <p class="insect-scientific">{insect.taxon.name}</p>
                  )}
                  <p class="insect-location">{insect.place_guess}</p>
                  <p class="insect-date">{formatObservationDate(insect.observed_on)}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))}
      
      <div class="insects-footer">
        <small>üìç Data from iNaturalist ‚Ä¢ Within 50km of {locationName}</small>
      </div>
    </div>
  )}
</section>

<style>
.insects-widget {
  background: rgba(0, 0, 0, 0.4);
  backdrop-filter: blur(10px);
  border-radius: 12px;
  padding: 1.5rem;
  margin: 1rem 0;
  border: 1px solid rgba(255, 255, 255, 0.1);
  color: white;
}

.insects-summary {
  display: flex;
  gap: 1rem;
  margin-bottom: 1.5rem;
  justify-content: center;
}

.stat-card {
  background: rgba(255, 255, 255, 0.1);
  border-radius: 8px;
  padding: 1rem;
  text-align: center;
  min-width: 120px;
}

.stat-number {
  display: block;
  font-size: 2rem;
  font-weight: bold;
  color: #32CD32;
  line-height: 1;
}

.stat-label {
  display: block;
  font-size: 0.85rem;
  opacity: 0.8;
  margin-top: 0.25rem;
}

.insect-category {
  margin-bottom: 2rem;
}

.insect-category h3 {
  margin-bottom: 1rem;
  font-size: 1.1rem;
  font-weight: 600;
}

.insects-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 1rem;
}

.insect-card {
  background: rgba(255, 255, 255, 0.08);
  border-radius: 8px;
  padding: 1rem;
  transition: transform 0.2s ease, background 0.2s ease;
  border: 1px solid rgba(255, 255, 255, 0.1);
}

.insect-card:hover {
  transform: translateY(-2px);
  background: rgba(255, 255, 255, 0.12);
}

.insect-header {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-bottom: 0.75rem;
}

.insect-emoji {
  font-size: 1.5rem;
  flex-shrink: 0;
}

.insect-photo {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid rgba(255, 255, 255, 0.2);
}

.insect-info {
  flex: 1;
}

.insect-name {
  margin: 0 0 0.25rem 0;
  font-size: 1rem;
  font-weight: 600;
  line-height: 1.2;
  color: #fcefdb;
}

.insect-scientific {
  margin: 0 0 0.25rem 0;
  font-size: 0.85rem;
  font-style: italic;
  opacity: 0.8;
  color: #32CD32;
}

.insect-location {
  margin: 0 0 0.25rem 0;
  font-size: 0.85rem;
  opacity: 0.8;
  line-height: 1.2;
}

.insect-date {
  margin: 0;
  font-size: 0.8rem;
  opacity: 0.7;
  color: #32CD32;
}

.insects-footer {
  text-align: center;
  margin-top: 1.5rem;
  padding-top: 1rem;
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  opacity: 0.7;
}

.insects-error, .insects-loading, .no-insects {
  text-align: center;
  padding: 2rem;
  color: white;
}

.insects-error {
  background: rgba(255, 0, 0, 0.2);
  border-radius: 8px;
}

.error-details {
  font-size: 0.8rem;
  opacity: 0.7;
  margin-top: 0.5rem;
}

@media (max-width: 768px) {
  .insects-summary {
    flex-direction: column;
    align-items: center;
  }
  
  .stat-card {
    min-width: 100px;
  }
  
  .insects-grid {
    grid-template-columns: 1fr;
  }
  
  .insect-card {
    padding: 0.75rem;
  }
  
  .insect-header {
    gap: 0.5rem;
  }
  
  .insect-photo {
    width: 35px;
    height: 35px;
  }
}
</style>