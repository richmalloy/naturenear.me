---
// EarthquakesWidget.astro - Recent earthquake data from USGS
export interface Props {
    lat: number;
    lng: number;
    locationName?: string;
}

const { lat, lng, locationName = "Unknown" } = Astro.props;

// Haversine distance function for calculating distances between coordinates
function haversineDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {
    const R = 6371; // Earth radius in kilometers
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
        Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c; // Distance in kilometers
}

let earthquakesData: any[] = [];
let error: string | null = null;

try {
    console.log(`üåã Fetching earthquakes data for ${lat}, ${lng}`);
    
    // USGS Earthquake API - get earthquakes from past 30 days
    const endTime = new Date().toISOString();
    const startTime = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString();
    
    // Use a large radius to capture regional seismic activity
    const radiusKm = 1000; // 1000km radius
    
    const usgsUrl = `https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&latitude=${lat}&longitude=${lng}&maxradiuskm=${radiusKm}&starttime=${startTime}&endtime=${endTime}&minmagnitude=2.0&orderby=magnitude&limit=20`;
    
    console.log(`üåã USGS API URL: ${usgsUrl}`);
    
    const response = await fetch(usgsUrl);
    if (!response.ok) {
        throw new Error(`USGS API error: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log(`üåã USGS API response:`, data);
    
    if (data.features && data.features.length > 0) {
        earthquakesData = data.features
            .map((feature: any) => {
                const coords = feature.geometry.coordinates;
                const props = feature.properties;
                const earthquakeLat = coords[1];
                const earthquakeLng = coords[0];
                const depth = coords[2] || 0;
                
                return {
                    id: feature.id,
                    magnitude: props.mag,
                    place: props.place || 'Unknown location',
                    time: new Date(props.time).toLocaleString(),
                    depth: depth,
                    lat: earthquakeLat,
                    lng: earthquakeLng,
                    distance: haversineDistance(lat, lng, earthquakeLat, earthquakeLng),
                    url: props.url,
                    alert: props.alert,
                    tsunami: props.tsunami ? 'Yes' : 'No',
                    significance: props.sig || 0
                };
            })
            .filter((eq: any) => eq.distance <= 800) // Within 800km
            .sort((a: any, b: any) => b.magnitude - a.magnitude) // Sort by magnitude, highest first
            .slice(0, 10); // Show up to 10 earthquakes
    }
    
    console.log(`üåã Processed earthquakes data:`, earthquakesData);
    
} catch (e) {
    console.error(`üåã USGS API failed:`, e);
    error = e instanceof Error ? e.message : 'Unknown error';
    
    // Fallback to static mock data if API fails
    const staticEarthquakes = [
        {
            id: 'mock1',
            magnitude: 4.2,
            place: '15km NE of Sample City',
            time: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toLocaleString(),
            depth: 8.5,
            lat: lat + 0.2,
            lng: lng + 0.3,
            distance: 35,
            url: '#',
            alert: null,
            tsunami: 'No',
            significance: 287
        },
        {
            id: 'mock2',
            magnitude: 3.8,
            place: '22km SW of Example Town',
            time: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toLocaleString(),
            depth: 12.3,
            lat: lat - 0.1,
            lng: lng - 0.2,
            distance: 28,
            url: '#',
            alert: null,
            tsunami: 'No',
            significance: 234
        }
    ];
    
    earthquakesData = staticEarthquakes.map(eq => ({
        ...eq,
        distance: haversineDistance(lat, lng, eq.lat, eq.lng)
    })).sort((a, b) => b.magnitude - a.magnitude);
}

function getMagnitudeColor(magnitude: number): string {
    if (magnitude >= 7.0) return '#8B0000'; // Dark red - Major
    if (magnitude >= 6.0) return '#FF0000'; // Red - Strong
    if (magnitude >= 5.0) return '#FF4500'; // Orange red - Moderate
    if (magnitude >= 4.0) return '#FFA500'; // Orange - Light
    if (magnitude >= 3.0) return '#FFD700'; // Gold - Minor
    return '#90EE90'; // Light green - Micro
}

function getMagnitudeLabel(magnitude: number): string {
    if (magnitude >= 7.0) return 'Major';
    if (magnitude >= 6.0) return 'Strong';
    if (magnitude >= 5.0) return 'Moderate';
    if (magnitude >= 4.0) return 'Light';
    if (magnitude >= 3.0) return 'Minor';
    return 'Micro';
}

function formatTimeAgo(timeString: string): string {
    try {
        const time = new Date(timeString);
        const now = new Date();
        const diffMs = now.getTime() - time.getTime();
        const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        
        if (diffDays > 0) return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
        if (diffHours > 0) return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
        return 'Recently';
    } catch {
        return timeString;
    }
}
---

<section id="earthquakes" class="data-section earthquakes-widget">
    <h2>üåã Recent Earthquakes</h2>
    <div id="earthquakes-data">
        {earthquakesData && earthquakesData.length > 0 ? (
            <div>
                <p class="data-summary">üìç Found {earthquakesData.length} earthquakes (M2.0+) in the past 30 days from USGS</p>
                <ul class="earthquakes-list">
                    {earthquakesData.map((eq) => (
                        <li class="earthquake-item" key={eq.id}>
                            <div class="earthquake-header">
                                <div class="magnitude-badge" style={`background-color: ${getMagnitudeColor(eq.magnitude)}`}>
                                    M{eq.magnitude.toFixed(1)}
                                </div>
                                <div class="earthquake-info">
                                    <strong class="earthquake-location">{eq.place}</strong>
                                    <div class="earthquake-class">{getMagnitudeLabel(eq.magnitude)} Earthquake</div>
                                </div>
                            </div>
                            <div class="earthquake-details">
                                <div class="earthquake-time">üïí {formatTimeAgo(eq.time)}</div>
                                <div class="earthquake-depth">üìè Depth: {eq.depth.toFixed(1)}km</div>
                                <div class="earthquake-distance">üìç Distance: {Math.round(eq.distance)}km</div>
                                {eq.tsunami === 'Yes' && (
                                    <div class="tsunami-warning">üåä Tsunami Alert</div>
                                )}
                                {eq.alert && (
                                    <div class="alert-level" style={`color: ${eq.alert === 'red' ? '#FF0000' : eq.alert === 'orange' ? '#FFA500' : '#FFD700'}`}>
                                        ‚ö†Ô∏è {eq.alert.toUpperCase()} Alert
                                    </div>
                                )}
                            </div>
                        </li>
                    ))}
                </ul>
            </div>
        ) : (
            <div class="no-data">
                <p>‚úÖ No significant earthquakes (M2.0+) detected in this region over the past 30 days.</p>
                {error && <p class="error-text">API Error: {error}</p>}
                <p class="info-note">This indicates relatively low seismic activity in the area recently.</p>
            </div>
        )}
    </div>
</section>

<style>
    .earthquakes-widget {
        background: linear-gradient(135deg, #ffe4e1 0%, #ffd4d4 50%, #ffb6c1 100%);
        border: 2px solid #dc143c;
        border-radius: 15px;
        padding: 20px;
        margin: 20px 0;
        box-shadow: 0 4px 15px rgba(220, 20, 60, 0.3);
    }

    .earthquakes-widget h2 {
        color: #8b0000;
        margin-bottom: 15px;
        text-align: center;
        font-size: 1.8em;
        text-shadow: 1px 1px 2px rgba(139, 0, 0, 0.2);
    }

    .data-summary {
        color: #8b0000;
        margin-bottom: 15px;
        font-weight: 500;
        text-align: center;
    }

    .earthquakes-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .earthquake-item {
        background: rgba(255, 255, 255, 0.9);
        border: 1px solid #ff6b6b;
        border-radius: 10px;
        margin-bottom: 12px;
        padding: 15px;
        transition: all 0.3s ease;
        backdrop-filter: blur(5px);
    }

    .earthquake-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(220, 20, 60, 0.3);
        border-color: #dc143c;
    }

    .earthquake-header {
        display: flex;
        align-items: center;
        margin-bottom: 12px;
    }

    .magnitude-badge {
        color: white;
        font-weight: bold;
        font-size: 1.2em;
        padding: 8px 12px;
        border-radius: 20px;
        margin-right: 15px;
        min-width: 60px;
        text-align: center;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    }

    .earthquake-info {
        flex: 1;
    }

    .earthquake-location {
        color: #8b0000;
        font-size: 1.1em;
        display: block;
        margin-bottom: 4px;
    }

    .earthquake-class {
        color: #a0522d;
        font-style: italic;
        font-size: 0.9em;
    }

    .earthquake-details {
        padding-left: 75px;
        font-size: 0.9em;
        line-height: 1.5;
    }

    .earthquake-time, .earthquake-depth, .earthquake-distance {
        color: #6b4423;
        margin-bottom: 4px;
    }

    .tsunami-warning {
        color: #0066cc;
        font-weight: bold;
        margin-top: 6px;
    }

    .alert-level {
        font-weight: bold;
        margin-top: 6px;
    }

    .no-data {
        text-align: center;
        padding: 30px 20px;
        color: #8b0000;
    }

    .no-data p {
        margin-bottom: 10px;
    }

    .error-text {
        color: #ff4500;
        font-size: 0.9em;
        font-style: italic;
    }

    .info-note {
        color: #6b4423;
        font-size: 0.9em;
        font-style: italic;
        max-width: 400px;
        margin: 0 auto;
    }

    /* Responsive design */
    @media (max-width: 768px) {
        .earthquakes-widget {
            margin: 15px 10px;
            padding: 15px;
        }

        .earthquake-details {
            padding-left: 0;
            margin-top: 10px;
        }

        .earthquake-header {
            flex-direction: column;
            text-align: center;
        }

        .magnitude-badge {
            margin-right: 0;
            margin-bottom: 10px;
        }
    }
</style>