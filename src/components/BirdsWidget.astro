---
export interface Props {
  lat: number;
  lng: number;
  locationName: string;
}

const { lat, lng, locationName } = Astro.props;

let birdsData = null;
let error = null;

try {
  console.log(`🐦 Fetching REAL bird data for ${locationName} (${lat}, ${lng})`);
  
  // eBird API - get recent observations within 50km
  const response = await fetch(
    `https://api.ebird.org/v2/data/obs/geo/recent?lat=${lat}&lng=${lng}&dist=50&maxResults=15&fmt=json`,
    {
      headers: {
        'X-eBirdApiToken': 'j0j0d58b330k'
      }
    }
  );
  
  if (!response.ok) throw new Error(`eBird API error: ${response.status}`);
  
  birdsData = await response.json();
  console.log(`✅ REAL bird data fetched for ${locationName}: ${birdsData.length} species`);
} catch (e) {
  console.error(`❌ Bird fetch failed for ${locationName}:`, e);
  error = e.message;
  
  // Fallback to demo data if API fails
  console.log("🔄 Using fallback demo data...");
  birdsData = [
    {
      comName: "Mountain Bluebird",
      locName: "Santa Fe National Forest",
      obsDt: new Date().toISOString(),
      howMany: 3
    },
    {
      comName: "Red-tailed Hawk", 
      locName: "Hyde Memorial State Park",
      obsDt: new Date(Date.now() - 86400000).toISOString(),
      howMany: 1
    }
  ];
}

// Helper function to get bird emoji
function getBirdEmoji(commonName) {
  const name = commonName.toLowerCase();
  if (name.includes('eagle')) return '🦅';
  if (name.includes('hawk')) return '🪶';
  if (name.includes('owl')) return '🦉';
  if (name.includes('duck')) return '🦆';
  if (name.includes('goose')) return '🪿';
  if (name.includes('swan')) return '🦢';
  if (name.includes('cardinal')) return '🐦‍⬛';
  if (name.includes('robin')) return '🐦';
  if (name.includes('blue jay') || name.includes('bluejay')) return '🐦‍⬛';
  if (name.includes('crow') || name.includes('raven')) return '🐦‍⬛';
  if (name.includes('hummingbird')) return '🐦';
  if (name.includes('woodpecker')) return '🐦';
  if (name.includes('finch')) return '🐦';
  if (name.includes('sparrow')) return '🐦';
  if (name.includes('wren')) return '🐦';
  return '🐦'; // Default bird emoji
}

// Helper function to format date
function formatObservationDate(dateStr) {
  const date = new Date(dateStr);
  const now = new Date();
  const diffDays = Math.floor((now - date) / (1000 * 60 * 60 * 24));
  
  if (diffDays === 0) return 'Today';
  if (diffDays === 1) return 'Yesterday';
  if (diffDays < 7) return `${diffDays} days ago`;
  return date.toLocaleDateString();
}

// Group birds by how recent they were seen
const groupedBirds = birdsData ? birdsData.reduce((groups, bird) => {
  const daysAgo = Math.floor((new Date() - new Date(bird.obsDt)) / (1000 * 60 * 60 * 24));
  let key;
  if (daysAgo === 0) key = 'today';
  else if (daysAgo <= 3) key = 'recent';
  else key = 'older';
  
  if (!groups[key]) groups[key] = [];
  groups[key].push(bird);
  return groups;
}, {}) : null;
---

<section id="birds" class="data-section birds-widget">
  <h2>🐦 Local Birds & Wildlife</h2>
  
  {error ? (
    <div class="birds-error">
      <p>⚠️ Unable to load bird data for {locationName}</p>
      <p class="error-details">{error}</p>
    </div>
  ) : !birdsData ? (
    <div class="birds-loading">
      <p>🔄 Loading bird observations for {locationName}...</p>
    </div>
  ) : birdsData.length === 0 ? (
    <div class="no-birds">
      <p>🔍 No recent bird observations found near {locationName}</p>
      <p>Check back later or try a different location!</p>
    </div>
  ) : (
    <div class="birds-content">
      <div class="birds-summary">
        <div class="stat-card">
          <span class="stat-number">{birdsData.length}</span>
          <span class="stat-label">Species Observed</span>
        </div>
        <div class="stat-card">
          <span class="stat-number">{new Set(birdsData.map(b => b.locName)).size}</span>
          <span class="stat-label">Locations</span>
        </div>
      </div>
      
      {groupedBirds.today && groupedBirds.today.length > 0 && (
        <div class="birds-group">
          <h3>🌅 Seen Today</h3>
          <div class="birds-grid">
            {groupedBirds.today.slice(0, 6).map(bird => (
              <div class="bird-card highlight">
                <span class="bird-emoji">{getBirdEmoji(bird.comName)}</span>
                <div class="bird-info">
                  <h4 class="bird-name">{bird.comName}</h4>
                  <p class="bird-location">{bird.locName}</p>
                  {bird.howMany && <p class="bird-count">Count: {bird.howMany}</p>}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
      
      {groupedBirds.recent && groupedBirds.recent.length > 0 && (
        <div class="birds-group">
          <h3>📅 Recent Sightings (Last 3 Days)</h3>
          <div class="birds-grid">
            {groupedBirds.recent.slice(0, 8).map(bird => (
              <div class="bird-card">
                <span class="bird-emoji">{getBirdEmoji(bird.comName)}</span>
                <div class="bird-info">
                  <h4 class="bird-name">{bird.comName}</h4>
                  <p class="bird-location">{bird.locName}</p>
                  <p class="bird-date">{formatObservationDate(bird.obsDt)}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
      
      {groupedBirds.older && groupedBirds.older.length > 0 && (
        <div class="birds-group">
          <h3>🗓️ This Week</h3>
          <div class="birds-list">
            {groupedBirds.older.slice(0, 5).map(bird => (
              <div class="bird-item">
                <span class="bird-emoji-small">{getBirdEmoji(bird.comName)}</span>
                <span class="bird-name-small">{bird.comName}</span>
                <span class="bird-date-small">{formatObservationDate(bird.obsDt)}</span>
              </div>
            ))}
          </div>
        </div>
      )}
      
      <div class="birds-footer">
        <small>📍 Data from eBird • Within 50km of {locationName}</small>
      </div>
    </div>
  )}
</section>

<style>
.birds-widget {
  background: rgba(0, 0, 0, 0.4);
  backdrop-filter: blur(10px);
  border-radius: 12px;
  padding: 1.5rem;
  margin: 1rem 0;
  border: 1px solid rgba(255, 255, 255, 0.1);
  color: white;
}

.birds-summary {
  display: flex;
  gap: 1rem;
  margin-bottom: 1.5rem;
  justify-content: center;
}

.stat-card {
  background: rgba(255, 255, 255, 0.1);
  border-radius: 8px;
  padding: 1rem;
  text-align: center;
  min-width: 120px;
}

.stat-number {
  display: block;
  font-size: 2rem;
  font-weight: bold;
  color: #4CAF50;
  line-height: 1;
}

.stat-label {
  display: block;
  font-size: 0.85rem;
  opacity: 0.8;
  margin-top: 0.25rem;
}

.birds-group {
  margin-bottom: 2rem;
}

.birds-group h3 {
  color: #4CAF50;
  margin-bottom: 1rem;
  font-size: 1.1rem;
}

.birds-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 1rem;
}

.bird-card {
  background: rgba(255, 255, 255, 0.08);
  border-radius: 8px;
  padding: 1rem;
  display: flex;
  align-items: flex-start;
  gap: 0.75rem;
  transition: transform 0.2s ease, background 0.2s ease;
}

.bird-card:hover {
  transform: translateY(-2px);
  background: rgba(255, 255, 255, 0.12);
}

.bird-card.highlight {
  background: rgba(76, 175, 80, 0.2);
  border: 1px solid rgba(76, 175, 80, 0.4);
}

.bird-emoji {
  font-size: 1.5rem;
  flex-shrink: 0;
}

.bird-info {
  flex: 1;
}

.bird-name {
  margin: 0 0 0.25rem 0;
  font-size: 1rem;
  font-weight: 600;
  line-height: 1.2;
}

.bird-location {
  margin: 0 0 0.25rem 0;
  font-size: 0.85rem;
  opacity: 0.8;
  line-height: 1.2;
}

.bird-date {
  margin: 0;
  font-size: 0.8rem;
  opacity: 0.7;
  color: #4CAF50;
}

.bird-count {
  margin: 0;
  font-size: 0.8rem;
  opacity: 0.9;
  font-weight: 500;
}

.birds-list {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.bird-item {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.75rem;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 6px;
}

.bird-emoji-small {
  font-size: 1.2rem;
  width: 1.5rem;
  text-align: center;
}

.bird-name-small {
  flex: 1;
  font-size: 0.9rem;
}

.bird-date-small {
  font-size: 0.8rem;
  opacity: 0.7;
  color: #4CAF50;
}

.birds-footer {
  text-align: center;
  margin-top: 1.5rem;
  padding-top: 1rem;
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  opacity: 0.7;
}

.birds-error, .birds-loading, .no-birds {
  text-align: center;
  padding: 2rem;
  color: white;
}

.birds-error {
  background: rgba(255, 0, 0, 0.2);
  border-radius: 8px;
}

.error-details {
  font-size: 0.8rem;
  opacity: 0.7;
  margin-top: 0.5rem;
}

@media (max-width: 768px) {
  .birds-summary {
    flex-direction: column;
    align-items: center;
  }
  
  .stat-card {
    min-width: 100px;
  }
  
  .birds-grid {
    grid-template-columns: 1fr;
  }
  
  .bird-card {
    padding: 0.75rem;
  }
}
</style>